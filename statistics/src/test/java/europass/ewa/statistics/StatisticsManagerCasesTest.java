/* 
 * Copyright (c) 2002-2020 Cedefop.
 * 
 * This file is part of EWA (Cedefop).
 * 
 * EWA (Cedefop) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * EWA (Cedefop) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with EWA (Cedefop). If not, see <http ://www.gnu.org/licenses/>.
 */
package europass.ewa.statistics;

import java.util.List;

import org.hamcrest.CoreMatchers;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Years;
import org.junit.Assert;
import org.junit.Test;

import europass.ewa.enums.ConversionFileType;
import europass.ewa.enums.EuropassDocumentType;
import europass.ewa.model.SkillsPassport;
import europass.ewa.statistics.data.StatsEntry;

public class StatisticsManagerCasesTest {
	
	
	@Test
	public void demographics(){
	    SkillsPassport esp = StatisticsMockObjects.demographics();
	    
	    DateTime dateOfBirth = new DateTime(1984,1,1,0,0,0,DateTimeZone.UTC);
	    DateTime now = new DateTime(DateTimeZone.UTC);
	    
	    StatsEntry actual = new StatisticsManager( esp ).prepare();
	    
	    Assert.assertNull(actual.getGender());
	     
	    Assert.assertThat(actual.getDateOfBirth(), CoreMatchers.is( dateOfBirth ));

	    Years age = Years.yearsBetween(dateOfBirth, now);
	    
	    Assert.assertThat(actual.getAge(), CoreMatchers.is(age.getYears()));
		
	    Assert.assertThat(actual.getNationalities().get(0).getNationality(), CoreMatchers.is("Έλληνας"));
	}
	
	@Test
	public void headlineCompleteTypeIsPersonalStatement(){
		SkillsPassport esp = StatisticsMockObjects.headlinePS();
		
		StatsEntry actual = new StatisticsManager(esp).prepare();
		
		Assert.assertThat( "Expected Headline Type", 
				actual.getHeadlineType(), 
				CoreMatchers.is( "personal_statement" ) );
		
		Assert.assertNull(actual.getHeadlineDescription());
		
	}
	
	@Test
	public void headlineTypeIsNullAndPersonalStatement(){
		//Inevitably, this will store the Personal Statement (Description.Label), as Type is null, so we cannot decide
		SkillsPassport esp = StatisticsMockObjects.headlineNullType();
		
		StatsEntry actual = new StatisticsManager(esp).prepare();
		
		Assert.assertNull( actual.getHeadlineType() );
		
		Assert.assertThat( "Expected Headline Description", 
				actual.getHeadlineDescription(), 
				CoreMatchers.is( "Kunfu Master" ) );
		
	}
	
	@Test
	public void headlineTypeOnlyLabelAndPersonalStatement(){
		//Inevitably, this will store the Personal Statement (Description.Label), as Type.Code is null, so we cannot decide
		SkillsPassport esp = StatisticsMockObjects.headlineNullTypeCode();
		
		StatsEntry actual = new StatisticsManager(esp).prepare();
		
		Assert.assertThat( "Expected Headline Type", 
				actual.getHeadlineType(), 
				CoreMatchers.is( "Personal Statement" ) );
		
		Assert.assertThat( "Expected Headline Description", 
				actual.getHeadlineDescription(), 
				CoreMatchers.is( "Kunfu Master" ) );		
	}
	
	@Test
	public void headlineCompleteTypeIsPosition(){
		SkillsPassport esp = StatisticsMockObjects.headline();
		
		StatsEntry actual = new StatisticsManager(esp).prepare();
		
		Assert.assertThat( "Expected Headline Type", 
				actual.getHeadlineType(), 
				CoreMatchers.is( "position" ) );
		
		Assert.assertThat( "Expected Headline Description", 
				actual.getHeadlineDescription(), 
				CoreMatchers.is( "M" ) );
	}
	
	@Test
	public void  metadata(){
		SkillsPassport esp = StatisticsMockObjects.espMetaData();
		
		StatsEntry actual = new StatisticsManager( esp ).prepare();
		
		Assert.assertThat( "Expected ESP Metadata file format ", 
				actual.getFileFormat(), 
				CoreMatchers.is( ConversionFileType.UNKNOWN.getDescription() ) );
		
	}
	
	@Test
	public void documentInfo(){
		SkillsPassport esp = StatisticsMockObjects.espDocumentInfo();

		StatsEntry actual = new StatisticsManager( esp ).prepare();
		
		Assert.assertThat( "Expected ESP Document Info Document Type ", 
				actual.getDocumentType(), 
				CoreMatchers.is( EuropassDocumentType.UNKNOWN.getAcronym() ) );

		Assert.assertThat( "Expected ESP Document Info Generated By ", 
				actual.getGeneratedBy(), 
				CoreMatchers.is( DocumentGenerator.UNKNOWN.getDescription() ) );
		
		Assert.assertThat( "Expected ESP Document Info Creation Date ", 
				actual.getCreationDate(), 
				CoreMatchers.notNullValue() );

		Assert.assertThat( "Expected ESP Document Info Is New ", 
				actual.getIsNew(), 
				CoreMatchers.is( false ) );
		
	}

	@Test
	public void documentBundles(){
		SkillsPassport esp = StatisticsMockObjects.espWithBundlesECLandELP();
		
		StatsEntry actual = new StatisticsManager( esp ).prepare();
		
		Assert.assertThat( "Expected ESP Document Info Document Type ", 
				actual.getDocumentType(), 
				CoreMatchers.is( EuropassDocumentType.ECV.getAcronym() ) );
		
		List<EuropassDocumentType> bundles = esp.getDocumentInfo().getBundle();
		
		Assert.assertThat( "Expected ESP Document Bundle is ELP", 
				bundles.get(0), 
		CoreMatchers.is( EuropassDocumentType.ELP ) );

		Assert.assertThat( "Expected ESP Document Bundle is ECL", 
				bundles.get(1), 
				CoreMatchers.is( EuropassDocumentType.ECL ) );
	}

	@Test
	public void attachmentInfo(){
		SkillsPassport esp = StatisticsMockObjects.espSetAttachmentInfo();
		
		StatsEntry actual = new StatisticsManager( esp ).prepare();
		
		Assert.assertThat( "Expected ESP Attachment Info Cumulative Size", 
				actual.getDetails().getCumulativeSize(), 
				CoreMatchers.is( 
						Long.valueOf(esp.getAttachmentList().get(1).getData().length)
					) );

		Assert.assertThat( "Expected ESP Attachment Info Number Of Files", 
				actual.getDetails().getNumberOfFiles(), 
				CoreMatchers.is( Integer.valueOf(esp.getAttachmentList().size()) ) );

		Assert.assertThat( "Expected ESP Attachment Info Type Of Files", 
				actual.getDetails().getTypeOfFiles(), 
				CoreMatchers.is( "application/pdf|application/pdf" ) );
	}
	
	@Test
	public void achievements(){
		SkillsPassport esp = StatisticsMockObjects.espSetAchievements();
		
		StatsEntry actual = new StatisticsManager( esp ).prepare();

		Assert.assertThat( "Expected ESP Set Achievements Cumulative Size", 
				actual.getAchievements().get(0).getCategory(), 
				CoreMatchers.is("Projects") );

		Assert.assertThat( "Expected ESP Set Achievements Cumulative Size", 
				actual.getAchievements().get(1).getCategory(), 
				CoreMatchers.is("references") );
	}

	@Test
	public void drivingSkills(){
		SkillsPassport esp = StatisticsMockObjects.espSetDrivingSkills();
		
		StatsEntry actual = new StatisticsManager( esp ).prepare();

		Assert.assertThat( "Expected ESP Set Driving Skills", 
				actual.getSkillsDriving(), CoreMatchers.is("A|B1") );
	}
	
	@Test
	public void motherLanguages(){
		SkillsPassport esp = StatisticsMockObjects.espSetMotherLanguages();
		
		StatsEntry actual = new StatisticsManager( esp ).prepare();

		Assert.assertThat( "Expected ESP Set Mother Language #1 ", 
				actual.getMotherLangs().get(0).getLanguage(),
				CoreMatchers.is("Greek") );

		Assert.assertThat( "Expected ESP Set Mother Language #2 ", 
				actual.getMotherLangs().get(1).getLanguage(),
				CoreMatchers.is("es") );
	}

	@Test
	public void foreignLanguages(){
		SkillsPassport esp = StatisticsMockObjects.espSetForeignLanguages();
		
		StatsEntry actual = new StatisticsManager( esp ).prepare();

		Assert.assertThat( "Expected ESP Set Foreign Language #1 Type", 
				actual.getForeignLanguages().get(0).getLanguageType(),
				CoreMatchers.is("English") );

		Assert.assertThat( "Expected ESP Set Foreign Language #1 Listening Level", 
				actual.getForeignLanguages().get(0).getListeningLevel(),
				CoreMatchers.is("C1") );

		Assert.assertThat( "Expected ESP Set Foreign Language #1 Spoken Interaction Level", 
				actual.getForeignLanguages().get(0).getSpokenInteractionLevel(),
				CoreMatchers.is("B2") );
		
		Assert.assertThat( "Expected ESP Set Foreign Language #2 Type", 
				actual.getForeignLanguages().get(1).getLanguageType(),
				CoreMatchers.is("it") );
		
		Assert.assertThat( "Expected ESP Set Foreign Language #2 Type", 
				actual.getForeignLanguages().get(1).getCertificates().get(0).getTitle(),
				CoreMatchers.is("Certificate in Italics") );
		
	}
	
	@Test
	public void workExperience(){
		SkillsPassport esp = StatisticsMockObjects.workExperience();
		
		StatsEntry actual = new StatisticsManager(esp).prepare();
		
		Assert.assertNull(actual.getWorkExperiences().get(0).getPosition());
		
		//checkEmpty removes the second experience
		Assert.assertThat(actual.getWorkExperiences().size(), CoreMatchers.is(1));
		
		Assert.assertThat(actual.getWorkExperiences().get(0).getPeriodFrom(), CoreMatchers.is(new DateTime(2010,12,1,0,0,0,DateTimeZone.UTC)));
		
		Assert.assertThat( 
				actual.getWorkExperiences().get(0).getEmployerSector(), 
				CoreMatchers.is( "Q") );
		
		Assert.assertThat( "Organisation Address", 
				actual.getWorkExperiences().get(0).getEmployerCountry(), 
				CoreMatchers.is( "Japan") );
		
	}
	
	@Test
	public void workOrganisationIsNull(){
		SkillsPassport esp = StatisticsMockObjects.workExperienceOrgIsNull();
		
		StatsEntry actual = new StatisticsManager(esp).prepare();
		
		Assert.assertNull(actual.getWorkExperiences().get(0).getPosition());
		
		System.out.println(new DateTime(2010,12,1,0,0,0,DateTimeZone.UTC).era());
		
		Assert.assertThat (actual.getWorkExperiences().get(0).getPeriodFrom(), CoreMatchers.is(new DateTime(2010,12,1,0,0,0,DateTimeZone.UTC)));
		
		Assert.assertNull( actual.getWorkExperiences().get(0).getEmployerSector());
		
		Assert.assertNull( actual.getWorkExperiences().get(0).getEmployerCountry() );
		
	}
	
	
	@Test
	public void attachmentFiles(){
		SkillsPassport esp = StatisticsMockObjects.espFileDataObj();
		
		StatsEntry actual = new StatisticsManager(esp).prepare();
		
		Assert.assertThat(actual.getDetails().getNumberOfFiles(), CoreMatchers.is(3));
		
		Assert.assertThat(actual.getDetails().getTypeOfFiles(), CoreMatchers.containsString("application/pdf"));
	}
	
	@Test
	public void education(){
		SkillsPassport esp = StatisticsMockObjects.education();
		
		StatsEntry actual = new StatisticsManager(esp).prepare();
				
		Assert.assertThat(actual.getEducationExperiences().get(0).getPeriodFrom(), CoreMatchers.is(new DateTime(2008,1,1,0,0,0,DateTimeZone.UTC)));
		
		Assert.assertThat(actual.getEducationExperiences().get(0).getDuration(), CoreMatchers.is(2));
		
	}
	
	@Test
	public void eduOrganisationIsNull(){
		SkillsPassport esp = StatisticsMockObjects.educationOrgIsNull();
		
		StatsEntry actual = new StatisticsManager(esp).prepare();
		
		Assert.assertNull(actual.getEducationExperiences().get(0).getOrganisationCountry());
		
		Assert.assertNull(actual.getEducationExperiences().get(0).getEducationalField());
		
		Assert.assertThat(actual.getEducationExperiences().get(0).getPeriodFrom(), CoreMatchers.is(new DateTime(2008,1,1,0,0,0,DateTimeZone.UTC)));
		
		Assert.assertThat(actual.getEducationExperiences().get(0).getDuration(), CoreMatchers.is(2));
		
	}
	
}
